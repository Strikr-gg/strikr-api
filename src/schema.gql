# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AuthInputType {
  email: String
  password: String!
  username: String
}

type AuthObjectType {
  email: String!
  id: Float!
  token: String!
}

type BracketPlayerObjectType {
  playerId: String!
  rank: Int!
  rating: Int!
  username: String!
}

input CreateUserInputType {
  email: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input EsportsTournamentInput {
  detail: String!
  image: String
  name: String!
  region: String!
  stream: String!
  url: String
}

type EsportsTournamentObjectType {
  detail: String!
  image: String
  name: String!
  region: String!
  stream: String!
  url: String
}

type GuideObjectType {
  author: UserObjectType!
  authorId: Float!
  content: String!
  createdAt: DateTime!
  id: Float!
  nogo_awakenings: [String!]
  pref_awakenings: [String!]
  role: String!
  situ_awakenings: [String!]
  title: String!
  updatedAt: DateTime!
}

type Mutation {
  createEsportsTournament(tournamentInput: EsportsTournamentInput!): EsportsTournamentObjectType!

  """Create a new player [Requires StrikrToken @ Admin level]"""
  createPlayer(PlayerCreateInput: PlayerInputType!): PlayerObjectType!
  createUser(UserCreateInput: CreateUserInputType!): UserObjectType!
  deleteUser(username: String!): UserObjectType!
  login(loginInput: AuthInputType!): AuthObjectType!
  seedTournament(teamsInput: [TeamInput!]!): [[BracketPlayerObjectType!]!]!
  updateUser(UserUpdateInput: UpdateUserInputType!, id: Float!): UserObjectType!
}

type PilotAutocompleteObjectType {
  emoticonId: String!
  region: String!
  tags: [String!]!
  username: String!
}

type PlayerCharacterMasteryItemObjectType {
  characterAssetName: String!
  currentTier: Float!
  currentTierXp: Float!
  idxHighestTierCollected: Float!
  maxTier: Float!
  totalXp: Float!
  xpToNextTier: Float!
}

type PlayerCharacterMasteryObjectType {
  characterMasteries: [PlayerCharacterMasteryItemObjectType!]!
  createdAt: String!
  playerId: String!
}

input PlayerCharacterRatingInputType {
  assists: Float!
  character: String!
  gamemode: String!
  games: Float!
  knockouts: Float!
  losses: Float!
  mvp: Float!
  playerId: String!
  role: String!
  saves: Float!
  scores: Float!
  wins: Float!
}

type PlayerCharacterRatingObjectType {
  assists: Float!
  character: String!
  createdAt: DateTime!
  gamemode: String!
  games: Float!
  id: Float!
  knockouts: Float!
  losses: Float!
  mvp: Float!
  player: PlayerObjectType!
  playerId: String!
  role: String!
  saves: Float!
  scores: Float!
  wins: Float!
}

input PlayerInputType {
  emoticonId: String
  logoId: String
  nameplareId: String
  nameplateId: String
  ratings: [PlayerCharacterRatingInputType!]
  titleId: String
  userId: Float!
  username: String!
}

type PlayerMasteryObjectType {
  createdAt: String!
  currentLevel: Float!
  currentLevelXp: Float!
  playerId: String!
  totalXp: Float!
  xpToNextLevel: Float!
}

type PlayerObjectType {
  characterMastery: PlayerCharacterMasteryObjectType
  characterRatings: [PlayerCharacterRatingObjectType!]
  createdAt: DateTime
  emoticonId: String!
  id: String!
  logoId: String
  mastery: PlayerMasteryObjectType
  nameplateId: String
  ratings: [PlayerRatingObjectType!]
  region: String!
  tags: [String!]
  titleId: String
  updatedAt: DateTime
  user: UserObjectType
  userId: Float
  username: String!
}

type PlayerRatingObjectType {
  createdAt: DateTime
  games: Float!
  id: Float!
  losses: Float!
  masteryLevel: Float!
  playerId: String!
  rank: Float!
  rating: Float!
  wins: Float!
}

type ProxyPlayerCharacterMasteryItemObjectType {
  characterAssetName: String!
  currentTier: Float!
  currentTierXp: Float!
  idxHighestTierCollected: Float!
  maxTier: Float!
  totalXp: Float!
  xpToNextTier: Float!
}

type ProxyPlayerCharacterMasteryObjectType {
  characterMasteries: [ProxyPlayerCharacterMasteryItemObjectType!]!
  createdAt: String!
  playerId: String!
}

type ProxyPlayerCharacterRatingObjectType {
  assists: Float!
  character: String!
  createdAt: DateTime!
  gamemode: String!
  games: Float!
  id: Float!
  knockouts: Float!
  losses: Float!
  mvp: Float!
  player: ProxyPlayerObjectType!
  playerId: String!
  role: String!
  saves: Float!
  scores: Float!
  wins: Float!
}

type ProxyPlayerMasteryObjectType {
  createdAt: String!
  currentLevel: Float!
  currentLevelXp: Float!
  playerId: String!
  totalXp: Float!
  xpToNextLevel: Float!
}

type ProxyPlayerObjectType {
  characterRatings: [ProxyPlayerCharacterRatingObjectType!]
  createdAt: DateTime
  emoticonId: String!
  id: String!
  logoId: String
  mastery: ProxyPlayerMasteryObjectType
  nameplateId: String
  proxyCharacterMastery: ProxyPlayerCharacterMasteryObjectType
  proxyRatings: [ProxyPlayerRatingObjectType!]
  region: String!
  tags: [String!]
  titleId: String
  updatedAt: DateTime
  user: UserObjectType
  userId: Float
  username: String!
}

type ProxyPlayerRatingObjectType {
  createdAt: DateTime
  games: Float!
  id: Float!
  losses: Float!
  masteryLevel: Float!
  playerId: String!
  rank: Float!
  rating: Float!
  wins: Float!
}

type Query {
  """
  If the player already exists on database, calculates the ΔT of the latest snapshot and the current time. If the ΔT is from "yesterday",  strikr will create a new snapshot for "Today" otherwise it will just update today's snapshot. (ratings: limited to last 7) (CharacterRatings: limited to last 1 per character) WARNING: THIS ENDPOINT WILL BE PROTECTED UNDER TOKEN IN THE NEAR FUTURE, BUT FOR NOW IT IS OPEN TO THE PUBLIC - I WOULD BE GLAD TO HAND OUT KEYS WHEN THE AUTHENTICATION ROLLS OUT!.
  """
  ensurePlayer(
    name: String!

    """
    If refresh is not set, or set to false we will return the cached Player directly ensurePlayer returns only last 7 snapshots of rating & character Ratings. TL;DR: You want a lot of data? use getPlayerRatings & getPlayerCharacterRatings, you want small sample of data or need to update the player data? use ensurePlayer with refresh set to true. Do you want to display the same sample of data but having the latest data is not priority but querying WAY FASTER is good for you? use ensurePlayer with refresh set to false. (Even when set to false if a player is not found on database, strikr will create a new player and return it)
    """
    refresh: Boolean

    """
    Region overrider for the player. Strikr seeks for players on all regions and returns the first result on the first region it finds. Some players plays or played at more than one region. Providing the region overrider will force strikr to only look into the provided region. Giving overrider will make the player region be changed to the overriden one (unless the player can't be found on said region leaderboard)
    """
    region: String
  ): PlayerObjectType!
  getEsportsTournaments(
    """Amount to return (defaults to 10, max of 25)"""
    limit: Float

    """Page offset (defaults to 0)"""
    page: Float
  ): [EsportsTournamentObjectType!]!

  """Returns the whole snapshot of the leaderboard players."""
  getLeaderboard(
    """
    Defines an object to use as sorter (Defaults to rank, accepts any numeric value from the leaderboardPlayerItem type)
    """
    filterBy: leaderboardFilters

    """Defines the limit of player per request (Defaults to 100, max of 1000)"""
    limit: Int

    """
    Defines the order of the leaderboard. Can be "asc" or "desc" (Defaults to asc)
    """
    order: String

    """Defines the page of the leaderboard (Defaults to 0)"""
    page: Int

    """
    The desired raw region id. Regions can be obtained with getLeadeboardRegions (Defaults to Global)
    """
    region: String
  ): [leaderboardPlayerItem!]!
  getLeaderboardRegions: [String!]!

  """
  Get a list of pilots for autocomplete. This searchs directly to the search engine instead of database.  This will be used for the search bar (BUG NOTICE: This endpoint relies on MeilliSearch which is not completely implemented yet. it should returns in up to 2ms with max amount on query) but might fail to returns at that time or return anything in reality).
  """
  getPilotsAutoComplete: PilotAutocompleteObjectType!
  getPlayer(id: String!): PlayerObjectType!

  """
  Returns the playe based on its provided name. Creates a new player if none is found.
  """
  getPlayerByName(name: String): PlayerObjectType!

  """
  Returns registered players from strikr. This means that got searched at least once in history.
  """
  getPlayers(
    """Limit of players per page (max of 25, defaults to 10)"""
    limit: Float

    """Page number"""
    page: Float

    """Filter by region"""
    region: String
  ): [PlayerObjectType!]!
  getUser(username: String!): UserObjectType!
  getUsers: [UserObjectType!]!
  me: UserObjectType!

  """
  Use the Strikr service to query data directly from the game. This is a proxy & transformer to the game data and should not be used if your intention is to display player statistics since it does not contain any of the data that is stored in the database, this endpoint wont generate snapshots either. (OBSERVATION: Not processed by StrikrSmartCache) (OBSERVATION: userID and other data gathered exclusively from strikr will be either null or hold default values since theres no database connection being made on this endpoint) (WARNING: This endpoint requires STAFF TOKEN)
  """
  proxyPlayer(
    """The player name to query"""
    name: String!

    """Filter by region"""
    region: String
  ): ProxyPlayerObjectType!
}

input TeamInput {
  name: String!
  players: [String!]!
}

input UpdateUserInputType {
  email: String
  password: String
  username: String
}

type UserObjectType {
  guides: [GuideObjectType!]
  id: Float!
  isStaff: Boolean!
  player: PlayerObjectType
  username: String!
}

"""The available filters for the game leaderboard."""
enum leaderboardFilters {
  losses
  masteryLevel
  rank
  rating
  toprole
  wins
}

type leaderboardPlayerItem {
  createdAt: DateTime!
  emoticonId: String
  losses: Float!
  playerId: String!
  rank: Float!
  rating: Float!
  region: String!
  socialUrl: String
  tags: [String!]
  titleId: String
  topRole: String!
  username: String!
  wins: Float!
}