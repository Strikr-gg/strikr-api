# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GuideObjectType {
  author: UserObjectType!
  authorId: Float!
  content: String!
  createdAt: DateTime!
  id: Float!
  nogo_awakenings: [String!]
  pref_awakenings: [String!]
  role: String!
  situ_awakenings: [String!]
  title: String!
  updatedAt: DateTime!
}

type Mutation {
  createPlayer(PlayerCreateInput: PlayerInputType!): PlayerObjectType!
}

type PilotAutocompleteObjectType {
  emoticonId: String!
  region: String!
  tags: [String!]!
  username: String!
}

type PlayerCharacterMasteryItemObjectType {
  characterAssetName: String!
  currentTier: Float!
  currentTierXp: Float!
  idxHighestTierCollected: Float!
  maxTier: Float!
  totalXp: Float!
  xpToNextTier: Float!
}

type PlayerCharacterMasteryObjectType {
  characterMasteries: [PlayerCharacterMasteryItemObjectType!]!
  playerId: String!
  timestamp: String!
}

input PlayerCharacterRatingInputType {
  assists: Float!
  character: String!
  gamemode: String!
  games: Float!
  knockouts: Float!
  losses: Float!
  mvp: Float!
  playerId: String!
  role: String!
  saves: Float!
  scores: Float!
  wins: Float!
}

type PlayerCharacterRatingObjectType {
  assists: Float!
  character: String!
  createdAt: DateTime!
  gamemode: String!
  games: Float!
  id: Float!
  knockouts: Float!
  losses: Float!
  mvp: Float!
  player: PlayerObjectType!
  playerId: String!
  role: String!
  saves: Float!
  scores: Float!
  wins: Float!
}

input PlayerInputType {
  emoticonId: String
  logoId: String
  nameplareId: String
  nameplateId: String
  ratings: [PlayerCharacterRatingInputType!]
  titleId: String
  userId: Float!
  username: String!
}

type PlayerMasteryObjectType {
  currentLevel: Float!
  currentLevelXp: Float!
  playerId: String!
  timestamp: String!
  totalXp: Float!
  xpToNextLevel: Float!
}

type PlayerObjectType {
  characterMastery: PlayerCharacterMasteryObjectType
  characterRatings: [PlayerCharacterRatingObjectType!]
  createdAt: DateTime
  emoticonId: String!
  id: String!
  logoId: String
  mastery: PlayerMasteryObjectType
  nameplateId: String
  ratings: [PlayerRatingObjectType!]
  region: String!
  tags: [String!]
  titleId: String
  updatedAt: DateTime
  user: UserObjectType
  userId: Float
  username: String!
}

type PlayerRatingObjectType {
  createdAt: DateTime
  games: Float!
  id: Float!
  losses: Float!
  masteryLevel: Float!
  playerId: String!
  rank: Float!
  rating: Float!
  wins: Float!
}

type Query {
  """
  If the player already exists on database, calculates the ΔT of the latest snapshot and the current time. If the ΔT is from "yesterday",  strikr will create a new snapshot for "Today". ensure only one sample is stored per day.
  If the player does not exists on database, it will create a new player allong with its ratings.
  """
  ensurePlayer(
    name: String!

    """
    If refresh is not set, or set to false we will return the cached Player directly. Making this function work exactly like getPlayerByName / getPlayer but with the extra functionality of creating the player if it is missing on database
    """
    refresh: Boolean
  ): PlayerObjectType!
  getPilotsAutoComplete: PilotAutocompleteObjectType!
  getPlayer(id: String!): PlayerObjectType!
  getPlayerByName(name: String!): PlayerObjectType!
  getPlayers: [PlayerObjectType!]!
}

type UserObjectType {
  guides: [GuideObjectType!]
  id: Float!
  isStaff: Boolean!
  player: PlayerObjectType
  username: String!
}